---
title: "gesyn - Practical 1: Introduction to synthetic data"
author: Thom Benjamin Volker
format: 
  html:
    df-print: kable
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 2
    code-line-numbers: true
---

# Introduction

Welcome to the first practical of the course! In this practical, we will work on the foundation of synthetic data generation: generative modelling. Specifically, we will work with the `disease` data, which consists of 232 patients of whom three variables are recorded: 

- `status`: whether the patient has survived (`deceased`, `recovered`);
- `stay`: how many days the patient has been hospitalized;
- `age`: the age of the patient.

We will work on creating a synthetic version of this data data set. However, before we start with generating data, we need to get a basic understanding of the data (just throwing a model at a data set is ___always___ a bad idea). 


### 1. Install and load the required packages, and fix the state of the random number generator to ensure reproducibility of your results.

```{r}
#| label: load-packages
#| message: false
#| warning: false
# install.packages("tidyverse")
# install.packages("psych")
# install.packages("mvtnorm")
library(tidyverse)
library(psych)
library(mvtnorm)

set.seed(123)
```

### 2. Download the disease data and load it into `R`.

```{r}
#| label: load-data
disease <- readRDS(url("https://thomvolker.github.io/gesyn/data/disease.RDS"))
```


# Data exploration

### 3. Inspect the first few rows of the data using `head()`.

```{r}
#| label: head-data
head(disease)
```

### 4. Get descriptive statistics for this data set. How many people have recovered? And what is the average age in the sample?

_Hint: You might want to use `summary()` or `describe()` from the `psych()` package._

```{r}
summary(disease)
describe(disease)
```

### 5. Visualize the distributions of the variables `status`, `stay` and `age`. What do you think of their distributions?

```{r}
ggplot(disease, aes(x = status)) +
  geom_histogram(stat = "count", fill = "lightblue") +
  theme_minimal()

ggplot(disease, aes(x = stay)) +
  geom_density(fill = "lightblue") +
  theme_minimal()

ggplot(disease, aes(x = age)) +
  geom_density(fill = "lightblue") +
  theme_minimal()
```

# Generative models

We will now start with generating synthetic data. 
For the moment, we will focus on univariate modelling strategies, and forget for the moment that the relationships between variables are also important. 
We will focus on multivariate modelling at a later moment. 

### 6. Generate 232 new samples from a binomial distribution.

_Hint: Use `rbinom()` with `size = 1`, and `prob` set to the proportion of individuals who recovered._

```{r}
syn_status <- rbinom(
  n = nrow(disease), 
  size = 1, 
  prob = mean(as.numeric(disease$status) - 1)
) |>
  factor(labels = c("deceased", "recovered"))
```


### 7. Compare the distributions of the original `status` variable with your synthetic `status` variable. Are they comparable?


```{r}
summary(disease$status)  
summary(syn_status)
```

The counts are slightly different, but the difference is relatively small. It seems a realistic synthetic version of the original variable.

### 8. Do you think it is appropriate to generate a synthetic `age` variable from a normal distribution? Why or why not?

```{r}
ggplot(disease, aes(x = age)) +
  geom_density(fill = "lightblue") +
  stat_function(fun = dnorm, 
                args = list(mean = mean(disease$age), 
                            sd = sd(disease$age))) +
  theme_minimal()

# A normal distribution comes rather close to the original distribution of the
# variable age, so in terms of distributional similarity: yes, a normal
# distribution is appropriate. However, a normal distribution is real-valued,
# whether age is recorded as integer numbers only. Still, we can solve for this
# by rounding the generated age values.
```

### 9. Generate 232 synthetic `age` values from a normal distribution, and round the sampled values.

_Hint:_ You can use the function `rnorm()`, and borrow the mean and standard deviation from the original variable.

```{r}
syn_age <- rnorm(
  n = nrow(disease),
  mean = mean(disease$age),
  sd = sd(disease$age)
) |>
  round()
```

### 10. Compare the distributions of the original `age` variable with your synthetic `age` variable. Are they comparable?

```{r}
ggplot(disease, aes(x = age)) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  geom_density(aes(x = syn_age), fill = "darkblue", alpha = 0.5) +
  theme_minimal()
```

The distributions are not identical, but indeed very similar, which is what we want. 

### 11. Compare the distribution of the variable `stay` with a normal distribution, a lognormal distribution (i.e., the exponent of a normally distributed variable) and a Poisson distribution using the figure below. Which distribution is most appropriate?

__OPTIONAL:__ If you have plenty of time left, program this comparison yourself. You can use `ggplot()` in combination with `stat_function`, using the functions `dnorm`, `dlnorm` and `dpois`. Pay close attention to the input arguments of these functions.


```{r}
ggplot(disease, aes(x = stay)) +
  geom_density(aes(col = "Observed")) +
  stat_function(aes(col = "Normal"),
                fun = ~dnorm(.x, 
                             mean = mean(disease$stay), 
                             sd = sd(disease$stay))) +
  stat_function(aes(col = "Log-normal"),
                fun = ~dlnorm(.x,
                              meanlog = mean(log(disease$stay)),
                              sdlog = sd(log(disease$stay)))) +
  stat_function(aes(col = "Poisson"),
                n = 71,
                fun = ~dpois(.x, lambda = mean(disease$stay))) +
  xlim(-15, 55) +
  scale_color_brewer(palette = "Dark2", type = "div") +
  theme_minimal()
```

### 12. Generate a synthetic version of the variable `stay` by exponentiating all `n = 232` values from  a normal distribution. Again round the drawn values.

_Hint: Because we exponentiate the values, we need to provide the mean and standard deviation on the log scale._

```{r}
syn_stay <- rnorm(
  n = 232,
  mean = mean(log(disease$stay)),
  sd = sd(log(disease$stay))
) |> 
  exp() |>
  round()


```


### 13. Compare the distributions of the original `stay` variable with your synthetic `stay` variable. Are they comparable?

```{r}
ggplot(disease, aes(x = stay)) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  geom_density(aes(x = syn_stay), fill = "darkblue", alpha = 0.5) +
  theme_minimal()
```

### 14. Separate the data into two groups based on the variable `status`. 

```{r}
deceased <- filter(disease, status == "deceased")
recovered <- filter(disease, status == "recovered")
```

### 15. For each of these groups, estimate the means and covariance matrix of the two variables, `age` and `stay`. Again use `log(stay)`.

```{r}
means_deceased <- c("age" = mean(deceased$age), 
                    "stay" = mean(log(deceased$stay)))
means_recovered <- c("age" = mean(recovered$age),
                     "stay" = mean(log(recovered$stay)))

var_deceased <- var(data.frame(age = deceased$age,
                               stay = log(deceased$stay)))
var_recovered <- var(data.frame(age = recovered$age,
                                stay = log(recovered$stay)))
```

### 16. Use your previously created `status` variable, and for each of the two groups, draw synthetic values for `age` and `stay`. 

Create a synthetic data set for the two groups separately. Draw these synthetic sets from a bivariate normal distribution, with the means and (co-)variances specified according to the just estimated values.

_Hint: You can use `rmvnorm` from the `mvtnorm`-package._

```{r}
syn_deceased <- rmvnorm(
  n = sum(syn_status == "deceased"),
  mean = means_deceased,
  sigma = var_deceased
)
syn_recovered <- rmvnorm(
  n = sum(syn_status == "recovered"),
  mean = means_recovered,
  sigma = var_recovered
)

syn <- bind_rows(
  "deceased" = data.frame(syn_deceased),
  "recovered" = data.frame(syn_recovered),
  .id = "status"
) |>
  mutate(
    status = factor(status),
    age = round(age),
    stay = exp(stay) |> round()
  )
```

### 17. OPTIONAL: Compare the univariate distributions of the variables in your final synthetic data set with the distributions in the observed data. Also compare the correlations between the variables. How good is the synthetic data?

```{r}
ggplot() +
  geom_density(aes(x = disease$age, col = "Observed")) +
  geom_density(aes(x = syn$age, col = "Synthetic"))

ggplot() +
  geom_density(aes(x = disease$stay, col = "Observed")) +
  geom_density(aes(x = syn$stay, col = "Synthetic"))

cor(sapply(disease, as.numeric))
cor(sapply(syn, as.numeric))
```



